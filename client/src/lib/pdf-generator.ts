import jsPDF from 'jspdf';
import type { Interview, InterviewEvaluation } from '@/types/interview';

export function generateInterviewReport(interview: Interview, evaluation: InterviewEvaluation): void {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Helper function to add text with proper spacing
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false, color: string = '#000000') => {
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
    pdf.setTextColor(color);
    
    // Handle text wrapping
    const lines = pdf.splitTextToSize(text, pageWidth - 40);
    pdf.text(lines, 20, yPosition);
    yPosition += lines.length * (fontSize * 0.35) + 5;
    
    // Check if we need a new page
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = 20;
    }
  };

  // Header
  addText('AI Excel Mock Interview Report', 20, true, '#2563eb');
  yPosition += 10;

  // Interview Details
  addText('Interview Overview', 16, true);
  addText(`Date: ${new Date(interview.startedAt).toLocaleDateString()}`);
  addText(`Duration: ${Math.floor((interview.duration || 0) / 60)} minutes`);
  addText(`Status: ${interview.status.toUpperCase()}`);
  yPosition += 10;

  // Score Overview
  addText('Performance Summary', 16, true);
  addText(`Overall Score: ${evaluation.overallScore}/100`, 14, true, evaluation.overallScore >= 70 ? '#22c55e' : '#ef4444');
  addText(`Questions Answered: ${evaluation.totalQuestions}`);
  addText(`Correct Answers: ${evaluation.correctAnswers}`);
  addText(`Success Rate: ${Math.round((evaluation.correctAnswers / evaluation.totalQuestions) * 100)}%`);
  yPosition += 10;

  // Category Scores
  if (Object.keys(evaluation.categoryScores).length > 0) {
    addText('Category Performance', 16, true);
    Object.entries(evaluation.categoryScores).forEach(([category, score]) => {
      const categoryName = category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      addText(`${categoryName}: ${score}/10`, 12, false, score >= 7 ? '#22c55e' : score >= 5 ? '#f59e0b' : '#ef4444');
    });
    yPosition += 10;
  }

  // Strengths
  if (evaluation.strengths.length > 0) {
    addText('Strengths', 16, true, '#22c55e');
    evaluation.strengths.forEach((strength, index) => {
      addText(`• ${strength}`, 11);
    });
    yPosition += 10;
  }

  // Areas for Improvement
  if (evaluation.improvements.length > 0) {
    addText('Areas for Improvement', 16, true, '#f59e0b');
    evaluation.improvements.forEach((improvement, index) => {
      addText(`• ${improvement}`, 11);
    });
    yPosition += 10;
  }

  // Question Details
  addText('Question Breakdown', 16, true);
  interview.responses.forEach((response, index) => {
    const question = interview.questions[index];
    if (question && response) {
      addText(`Question ${index + 1}: ${question.category.toUpperCase()}`, 12, true);
      addText(`Q: ${question.question}`, 10);
      addText(`A: ${response.answer}`, 10, false, '#666666');
      if (response.score) {
        addText(`Score: ${response.score}/10`, 10, true, response.score >= 7 ? '#22c55e' : '#ef4444');
        if (response.feedback) {
          addText(`Feedback: ${response.feedback}`, 10, false, '#666666');
        }
      }
      yPosition += 5;
    }
  });

  // Recommendations
  if (evaluation.recommendations && evaluation.recommendations.length > 0) {
    addText('Recommendations', 16, true, '#2563eb');
    evaluation.recommendations.forEach(recommendation => {
      addText(`• ${recommendation}`, 11);
    });
  }

  // Footer
  const finalY = pageHeight - 20;
  pdf.setFontSize(8);
  pdf.setTextColor('#666666');
  pdf.text('Generated by AI Excel Mock Interviewer', 20, finalY);
  pdf.text(new Date().toISOString(), pageWidth - 20, finalY, { align: 'right' });

  // Save the PDF
  const fileName = `excel_interview_report_${new Date().toISOString().split('T')[0]}.pdf`;
  pdf.save(fileName);
}

export function generateTranscript(interview: Interview): void {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  let yPosition = 20;

  // Helper function
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
    const lines = pdf.splitTextToSize(text, pageWidth - 40);
    pdf.text(lines, 20, yPosition);
    yPosition += lines.length * (fontSize * 0.35) + 5;
  };

  // Header
  addText('Interview Transcript', 20, true);
  addText(`Date: ${new Date(interview.startedAt).toLocaleDateString()}`, 12);
  yPosition += 10;

  // Conversation
  interview.questions.forEach((question, index) => {
    const response = interview.responses[index];
    
    addText(`AI Interviewer:`, 12, true);
    addText(question.question, 11);
    yPosition += 5;
    
    if (response) {
      addText(`Candidate:`, 12, true);
      addText(response.answer, 11);
      yPosition += 10;
    }
  });

  // Save
  const fileName = `interview_transcript_${new Date().toISOString().split('T')[0]}.pdf`;
  pdf.save(fileName);
}
